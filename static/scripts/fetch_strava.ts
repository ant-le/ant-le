import axios from 'axios'
import * as fs from 'fs/promises'
import * as path from 'path'
import { fileURLToPath } from 'url'
import 'dotenv/config'

// --- Type Definitions ---
interface StravaActivity {
    id: number
    name: string
    distance: number // in meters
    moving_time: number // in seconds
    elapsed_time: number // in seconds
    total_elevation_gain: number
    type: string
    start_date: string
    start_date_local: string
    map: {
        summary_polyline: string | null
    }
}

interface RunningTraining {
    distance: number // in km
    moving_time: number // in minutes
    date: Date
}

// --- Strava API Configuration ---
const STRAVA_CLIENT_ID = process.env.STRAVA_CLIENT_ID
const STRAVA_CLIENT_SECRET = process.env.STRAVA_CLIENT_SECRET
const STRAVA_REFRESH_TOKEN = process.env.STRAVA_REFRESH_TOKEN

// --- File System Configuration ---
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const ACTIVITIES_OUTPUT_PATH = path.join(
    __dirname,
    '..',
    'src',
    'lib',
    'types',
    'running.ts'
)

// --- Strava Endpoints ---
const TOKEN_URL = 'https://www.strava.com/oauth/token'
const ACTIVITIES_URL = 'https://www.strava.com/api/v3/athlete/activities'

/**
 * Uses the refresh token to get a new, short-lived access token from Strava.
 * @returns A fresh access token.
 */
const getAccessToken = async (): Promise<string> => {
    console.log('Refreshing Strava access token...')
    try {
        const response = await axios.post(TOKEN_URL, {
            client_id: STRAVA_CLIENT_ID,
            client_secret: STRAVA_CLIENT_SECRET,
            grant_type: 'refresh_token',
            refresh_token: STRAVA_REFRESH_TOKEN,
        })
        console.log('Successfully refreshed token.')
        return response.data.access_token
    } catch (error) {
        console.error(
            'Failed to refresh Strava token. Check your credentials in .env'
        )
        throw new Error(
            axios.isAxiosError(error)
                ? error.response?.data?.message
                : 'Token refresh failed'
        )
    }
}

/**
 * Fetches ALL activities from the Strava API using pagination.
 * @param accessToken - A valid Strava access token.
 * @returns A list of all activities.
 */
const fetchAllActivities = async (
    accessToken: string
): Promise<StravaActivity[]> => {
    console.log(
        'Fetching all activities from Strava... (This may take a while)'
    )
    const allActivities: StravaActivity[] = []
    let page = 1
    const perPage = 100 // Fetch in batches of 100 for efficiency
    let currentBatch: StravaActivity[]

    try {
        do {
            console.log(`Fetching page ${page}...`)
            const response = await axios.get<StravaActivity[]>(ACTIVITIES_URL, {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
                params: {
                    per_page: perPage,
                    page: page,
                },
            })

            currentBatch = response.data

            if (currentBatch && currentBatch.length > 0) {
                allActivities.push(...currentBatch)
                page++
            }
        } while (currentBatch && currentBatch.length === perPage)

        console.log(
            `Successfully fetched a total of ${allActivities.length} activities.`
        )
        return allActivities
    } catch (error) {
        console.error('Failed to fetch Strava activities.')
        throw new Error(
            axios.isAxiosError(error)
                ? error.response?.data?.message
                : 'Activity fetch failed'
        )
    }
}

/**
 * Main function to run the entire process.
 */
const main = async (): Promise<void> => {
    if (!STRAVA_CLIENT_ID || !STRAVA_CLIENT_SECRET || !STRAVA_REFRESH_TOKEN) {
        console.error(
            'Strava API credentials are not fully set in the .env file.'
        )
        process.exit(1)
    }

    try {
        const accessToken = await getAccessToken()

        // --- Process and Save Activities ---
        const activities = await fetchAllActivities(accessToken)
        const runningActivities = activities.filter(
            (activity) => activity.type === 'Run'
        )
        console.log(`Found ${runningActivities.length} running activities.`)
        const transformedActivities: RunningTraining[] = runningActivities.map(
            (activity) => ({
                distance: parseFloat((activity.distance / 1000).toFixed(2)),
                moving_time: parseFloat((activity.moving_time / 60).toFixed(2)),
                date: new Date(activity.start_date_local),
            })
        )

        let activitiesFileContent = `// This file is auto-generated by fetch-strava.ts. Do not edit manually.\n\n`
        activitiesFileContent += `export interface RunningTraining {\n    distance: number;\n    moving_time: number;\n    date: Date;\n}\n\n`
        activitiesFileContent += `export const runningTraining: RunningTraining[] = [\n`
        const activityStrings = transformedActivities.map(
            (activity) =>
                `    { distance: ${activity.distance}, moving_time: ${activity.moving_time}, date: new Date('${activity.date.toISOString()}') }`
        )
        activitiesFileContent += activityStrings.join(',\n')
        activitiesFileContent += '\n];\n'

        await fs.mkdir(path.dirname(ACTIVITIES_OUTPUT_PATH), {
            recursive: true,
        })
        await fs.writeFile(ACTIVITIES_OUTPUT_PATH, activitiesFileContent)
        console.log(
            `Successfully saved running activities to ${ACTIVITIES_OUTPUT_PATH}`
        )
    } catch (error) {
        const message =
            error instanceof Error ? error.message : 'An unknown error occurred'
        console.error('Failed to fetch and save Strava data:', message)
        process.exit(1)
    }
}

main()
